version: 2.1

parameters:
  sdk_image:
    type: string
    default: ${CIRCLE_WORKFLOW_ID}
  image-name:
    type: string
    default: "bond-sdk-web"
  # CircleCI "recommends" using versioning to invalidate cache
  # 
  #   https://support.circleci.com/hc/en-us/articles/115015426888-Clear-project-dependency-cache
  # 
  cache-version:
    type: string
    default: "0"

#Orb importing
orbs:
  artifactory-orb: jfrog/artifactory-orb@1.0.1 #Build and push to Artifactory
  aws-cli: circleci/aws-cli@1.4.0

jobs:

  build:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - restore_cache:
          keys:
            - << pipeline.parameters.image-name >>-deps-v<< pipeline.parameters.cache-version >>-{{ checksum "package.json" }}
      - run: npm install
      - save_cache:
          paths: 
            - node_modules
          key: << pipeline.parameters.image-name >>-deps-v<< pipeline.parameters.cache-version >>-{{ checksum "package.json" }}
      - run: npm run build
      - persist_to_workspace:
          root: dist
          paths:
            - "?*"

  publish_local_registry:
    docker:
      - image: circleci/node:12
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - run:
          name: Build and publish to local registry
          command: |
            docker run -d -p 5000:5000 --restart=always --name registry registry:2
            docker build --build-arg NODE_ENV=NODE_ENV -t localhost:5000/bond-sdk-web:${CIRCLE_WORKFLOW_ID} .
            docker push localhost:5000/bond-sdk-web:${CIRCLE_WORKFLOW_ID}
            mkdir -p saved_images
            docker save -o saved_images/docker_image_sdk.tar localhost:5000/bond-sdk-web:${CIRCLE_WORKFLOW_ID}
      - persist_to_workspace:
          root: saved_images
          paths:
            - docker_image_sdk.tar

  cypress:
    docker:
      - image: circleci/node:12
    steps:
      - setup_remote_docker
      - checkout
      - attach_workspace:
          at: saved_images
      - artifactory-orb/install
      - artifactory-orb/configure
      - artifactory-orb/docker-login:
          docker-registry: ${ARTIFACTORY_REGISTRY}
      - run:
          name: Start containers
          command: |
            docker load -i saved_images/docker_image_sdk.tar
            export SDK_IMAGE=<< pipeline.parameters.sdk_image >>
            docker-compose -f docker-compose-test.yaml up -d
            sleep 30
      - run:
          name: Perform e2e Cypress Tests
          command: |
            SDK_CONTAINER_ID=$(docker ps -aqf "name=bond-sdk-web-client")
            SDK_CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $SDK_CONTAINER_ID)
            export SDK_CONTAINER_IP=${SDK_CONTAINER_IP}
            export IDENTITY=${CYPRESS_IDENTITY}
            export AUTHORIZATION=${CYPRESS_AUTHORIZATION}
            export CYPRESS_CREDIT_CARD_ID=${CYPRESS_CREDIT_CARD_ID}
            export CYPRESS_CREDIT_CARD_NUMBER=${CYPRESS_CREDIT_CARD_NUMBER}
            export CYPRESS_CREDIT_CARD_EXP=${CYPRESS_CREDIT_CARD_EXP}
            export CYPRESS_CREDIT_CARD_CVV=${CYPRESS_CREDIT_CARD_CVV}
            export CYPRESS_CREDIT_CARD_PIN=${CYPRESS_CREDIT_CARD_PIN}
            export CYPRESS_CREDIT_CARD_NEW_PIN=${CYPRESS_CREDIT_CARD_NEW_PIN}
            export CYPRESS_DEBIT_CARD_ID=${CYPRESS_DEBIT_CARD_ID}
            export CYPRESS_DEBIT_CARD_NUMBER=${CYPRESS_DEBIT_CARD_NUMBER}
            export CYPRESS_DEBIT_CARD_EXP=${CYPRESS_DEBIT_CARD_EXP}
            export CYPRESS_DEBIT_CARD_CVV=${CYPRESS_DEBIT_CARD_CVV}
            export CYPRESS_DEBIT_CARD_PIN=${CYPRESS_DEBIT_CARD_PIN}
            export CYPRESS_DEBIT_CARD_NEW_PIN=${CYPRESS_DEBIT_CARD_NEW_PIN}
            export CYPRESS_RECORD_KEY=${CYPRESS_SDK_CARDS_RECORD_KEYS}
            export COMMIT_INFO_MESSAGE=$(git log --format=%B -n 1 $CIRCLE_SHA1)
            export COMMIT_INFO_BRANCH=$CIRCLE_BRANCH
            export COMMIT_INFO_AUTHOR=$CIRCLE_USERNAME
            export COMMIT_INFO_SHA=$CIRCLE_SHA1
            export COMMIT_INFO_REMOTE=$CIRCLE_REPOSITORY_URL
            export CUSTOMER_ID=${CYPRESS_CUSTOMER_ID}
            export ACCOUNT_ID=${CYPRESS_ACCOUNT_ID}
            export IDENTITY_FOR_EXTERNAL_ACCOUNTS_SDK=${CYPRESS_IDENTITY_FOR_EXTERNAL_ACCOUNTS_SDK}
            export AUTHORIZATION_FOR_EXTERNAL_ACCOUNTS_SDK=${CYPRESS_AUTHORIZATION_FOR_EXTERNAL_ACCOUNTS_SDK}
            docker-compose -f docker-compose-cypress.yaml config
            docker-compose -f docker-compose-cypress.yaml up --timeout 30000 --exit-code-from cypress
          no_output_timeout: 6m

  push_to_cdn:
    executor: aws-cli/default
    steps:
      - checkout
      - attach_workspace:
          at: dist
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION
          profile-name: default
      - run:
          name: push
          command: |
            FULL_VERSION=$( sed -En 's/[ ]*"version"[ ]*:[ ]*"([0-9]+\.[0-9]+\.[0-9]+)".*/\1/p' package.json )
            MAJOR_VERSION=$( echo ${FULL_VERSION} | cut -d'.' -f1 )
            MINOR_VERSION=$( echo ${FULL_VERSION} | cut -d'.' -f2 )
            PATCH_VERSION=$( echo ${FULL_VERSION} | cut -d'.' -f3 )
            aws s3 cp dist/bond-sdk-web.js s3://bond-prod-web-assets/sdk/web/archive/v${FULL_VERSION}-${CIRCLE_BRANCH}-${CIRCLE_SHA1}.js
            if [[ ${CIRCLE_BRANCH} =~ ^main$ ]] ; then
              aws s3 cp dist/bond-sdk-web.js s3://bond-prod-web-assets/sdk/web/v${MAJOR_VERSION}/bond-sdk-web.js
              aws s3 cp dist/bond-sdk-web.js s3://bond-prod-web-assets/sdk/wev/v/${MAJOR_VERSION}/${MINOR_VERSION}/${PATCH_VERSION}/bond-sdk-web.js
            fi

  publish_to_npm:
    docker:
      - image: circleci/node:12
    steps:
      - attach_workspace:
          at: dist
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
      - run:
          name: Publish package
          command: npm publish


workflows:

  version: 2

  pipeline:
    jobs:
      - build:
          requires:
            - cypress
      - publish_local_registry
      - cypress:
          context: bond_cypress_tests
          requires:
            - publish_local_registry
      - push_to_cdn:
          requires:
            - build
      - publish_to_npm:
          context: npm_publish
          requires:
            - build
            - cypress
          filters:
            branches:
              only:
                - main

  daily_integration_verification:
    triggers:
        - schedule:
            cron: "45 11 * * *"
            filters:
              branches:
                only:
                  - main

    jobs:
      - publish_local_registry
      - cypress:
          context: bond_cypress_tests
          requires:
            - publish_local_registry
